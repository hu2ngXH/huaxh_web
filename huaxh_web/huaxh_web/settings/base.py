"""
Django settings for huaxh_web project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

VERSION = '${version}'
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# print("__file__", __file__)  # E:\Code\huaxh\huaxh_web\huaxh_web\settings\base.py
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'm+pq71z3lm^h*c&bdu^hjj!$+7f9%exq+r-er)7#$#s-of$a*8'

# Application definition
# 顺序很重要 找template之类的会根据顺序查找 会出现覆盖的情况
INSTALLED_APPS = [
    'blog',
    'config',
    'comment',
    'huaxh_web',

    'rest_framework',
    'ckeditor',
    'ckeditor_uploader',
    'dal',
    'dal_select2',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',  # 静态文件访问的功能
]

MIDDLEWARE = [
    'blog.middleware.user_id.UserIDMiddleware',  # 先经过这个中间件 request对象上就多了一个uid属性

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'huaxh_web.urls'

# 原来的模板目录配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 设置变量
THEME = 'bootstrap'

# 首先找寻DIRS 然后找各个APP中的
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'themes', THEME, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 静态资源的配置
# 用来配置部署之后的静态资源路径 Django提供了collectionstatic命令来收集所有的静态资源到STATIC_ROOT配置的目录中
# 就可以通过Nginx这样的软件配置静态资源路径了 目前没有作用
STATIC_ROOT = '/tmp/static'
# 用来配置页面上静态资源的起始路径 比如博客列表中CSS资源拆分之后的地址就是/static/css/base.css
STATIC_URL = '/static/'
# 用来指定静态资源所在目录 我们访问上面的CSS地址时 Django会去这些目录下查找 collectionstatic也会去这些目录下查找
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'themes', THEME, "static"),
]

WSGI_APPLICATION = 'huaxh_web.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'  # 语言为中文汉字

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'  # 时区为上海时区

USE_I18N = True

USE_L10N = True

USE_TZ = True

# REST
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 2,  # 分页
}

# 富文本编辑器
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': 800,
        'tabSpaces': 4,
        'extraPlugins': 'codesnippet',  # 配置代码插件
    }
}

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
CKEDITOR_UPLOAD_PATH = "article_images"

# 自定义storage
DEFAULT_FILE_STORAGE = 'huaxh_web.storage.WatermarkStorage'
